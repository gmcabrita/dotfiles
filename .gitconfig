[user]
  email = goncalo@mendescabrita.com
  name = Gon√ßalo Mendes Cabrita
  signingkey = ~/.ssh/id_ed25519
[commit]
  gpgsign = true
  verbose = true
[rerere]
  enabled = true
  autoupdate = true
[gpg]
  format = ssh
[credential]
  helper = manager
[core]
  fscache = true
  autocrlf = false
  editor = "zed -n -w"
  symlinks = true
  fsmonitor = false
  excludesfile = ~/.gitignore
[diff]
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
  external = difft
[branch]
  sort = -committerdate
[tag]
  sort = version:refname
[merge]
  conflictstyle = zdiff3
[color]
  ui = auto
[column]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions
  whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[help]
  autocorrect = prompt
[gist]
  private = yes
[alias]
  # Push and open PR
  ppr = !git push && gh pr create --web --assignee="@me"

  web = !gh repo view --web

  # Quick commit
  c = commit

  # Quick branch
  b = branch

  # Quick add
  a = add
  aa = add .

  # Quick add hunks
  ap = add --patch

  # Quick checkout
  co = checkout

  # Quick switch
  sw = switch

  maincheckout = "!f() { if [ -n \"$(git status --porcelain)\" ]; then echo \"Error: You have uncommitted changes, discard or stash them first.\"; exit 1; fi; git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed \"s@^refs/remotes/origin/@@\") && git checkout -b \"$1\"; }; f"
  mainco = maincheckout
  mco = maincheckout

  # Quick push
  p = push

  # Quick status
  s = status

  prettylog = "!. ~/.githelpers && pretty_git_log"
  la = "!git prettylog --all"
  lr = "!git prettylog -30"
  lra = "!git lr --all"
  l = "!git log"
  lg = "!git prettylog -G $1 -- $2"

  # View history graph
  graph = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  tree = log --oneline --decorate --graph

  ruf = "!. ~/.githelpers && remove_untracked_files"
  fsw = "!. ~/.githelpers && git_fsw"
  prsw = "!. ~/.githelpers && git_prsw"
  fco = "!. ~/.githelpers && echo \"REMINDER: migrate to 'git fsw'\" && git_fsw"
  prco = "!. ~/.githelpers && echo \"REMINDER: migrate to 'git prsw'\"  && git_prsw"

  # Quick log with patch
  lp = log --patch

  # Find when some piece of code was initially introduced
  when = log --reverse -S

  # Quick diff
  d = diff
  ds = diff --staged

  # Word-based diff
  wd = diff --color-words
  wds = diff --staged --color-words

  # Modified files
  modified = diff --name-only --diff-filter=M
  modified-all = diff HEAD --name-only --diff-filter=MA

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Quick commit ammend
  amend = commit --amend

  publish = "!f() { git commit -am \"Publish updates\"; git push; }; f"
  puxaforte = "!f() { git reset --hard "@{upstream}"; git clean -d -f; git pull; }; f"
  rip = "!f() { git reset --hard HEAD; git clean -d -f; }; f"
  discard = rip

  delete = branch -D
  unstage = reset HEAD --
  uncommit = reset --soft HEAD^
  undo = reset HEAD~

  cleanup = "!f() { git remote prune origin; git for-each-ref --format '%(refname:short)' 'refs/heads' | grep -v \"master\\|main\\|develop\" | xargs git branch -D; }; f"

  cleantags = !git tag -l | xargs git tag -d && git fetch -t

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered
[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix
[push]
  default = simple
  followTags = true
  autoSetupRemote = true
[fetch]
  prune = true
  pruneTags = true
  all = true
[pull]
  rebase = false
[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[init]
  defaultBranch = main
[credential "helperselector"]
  selected = manager-core
